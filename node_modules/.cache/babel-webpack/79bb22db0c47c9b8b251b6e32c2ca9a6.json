{"ast":null,"code":"import { Observable, BehaviorSubject, of, from } from 'rxjs';\nimport { concatMap, first } from 'rxjs/operators';\nimport { getStatusText, isSuccess, STATUS } from './http-status-codes';\nimport { delayResponse } from './delay-response';\nimport { InMemoryBackendConfig, parseUri, removeTrailingSlash } from './interfaces';\n/**\r\n * Base class for in-memory web api back-ends\r\n * Simulate the behavior of a RESTy web api\r\n * backed by the simple in-memory data store provided by the injected `InMemoryDbService` service.\r\n * Conforms mostly to behavior described here:\r\n * http://www.restapitutorial.com/lessons/httpmethods.html\r\n */\nvar BackendService = /** @class */function () {\n  function BackendService(inMemDbService, config) {\n    if (config === void 0) {\n      config = {};\n    }\n    this.inMemDbService = inMemDbService;\n    this.config = new InMemoryBackendConfig();\n    this.requestInfoUtils = this.getRequestInfoUtils();\n    var loc = this.getLocation('/');\n    this.config.host = loc.host; // default to app web server host\n    this.config.rootPath = loc.path; // default to path when app is served (e.g.'/')\n    Object.assign(this.config, config);\n  }\n  Object.defineProperty(BackendService.prototype, \"dbReady\", {\n    ////  protected /////\n    get: function () {\n      if (!this.dbReadySubject) {\n        // first time the service is called.\n        this.dbReadySubject = new BehaviorSubject(false);\n        this.resetDb();\n      }\n      return this.dbReadySubject.asObservable().pipe(first(function (r) {\n        return r;\n      }));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Process Request and return an Observable of Http Response object\r\n   * in the manner of a RESTy web api.\r\n   *\r\n   * Expect URI pattern in the form :base/:collectionName/:id?\r\n   * Examples:\r\n   *   // for store with a 'customers' collection\r\n   *   GET api/customers          // all customers\r\n   *   GET api/customers/42       // the character with id=42\r\n   *   GET api/customers?name=^j  // 'j' is a regex; returns customers whose name starts with 'j' or 'J'\r\n   *   GET api/customers.json/42  // ignores the \".json\"\r\n   *\r\n   * Also accepts direct commands to the service in which the last segment of the apiBase is the word \"commands\"\r\n   * Examples:\r\n   *     POST commands/resetDb,\r\n   *     GET/POST commands/config - get or (re)set the config\r\n   *\r\n   *   HTTP overrides:\r\n   *     If the injected inMemDbService defines an HTTP method (lowercase)\r\n   *     The request is forwarded to that method as in\r\n   *     `inMemDbService.get(requestInfo)`\r\n   *     which must return either an Observable of the response type\r\n   *     for this http library or null|undefined (which means \"keep processing\").\r\n   */\n  BackendService.prototype.handleRequest = function (req) {\n    var _this = this;\n    //  handle the request when there is an in-memory database\n    return this.dbReady.pipe(concatMap(function () {\n      return _this.handleRequest_(req);\n    }));\n  };\n  BackendService.prototype.handleRequest_ = function (req) {\n    var _this = this;\n    var url = req.urlWithParams ? req.urlWithParams : req.url;\n    // Try override parser\n    // If no override parser or it returns nothing, use default parser\n    var parser = this.bind('parseRequestUrl');\n    var parsed = parser && parser(url, this.requestInfoUtils) || this.parseRequestUrl(url);\n    var collectionName = parsed.collectionName;\n    var collection = this.db[collectionName];\n    var reqInfo = {\n      req: req,\n      apiBase: parsed.apiBase,\n      collection: collection,\n      collectionName: collectionName,\n      headers: this.createHeaders({\n        'Content-Type': 'application/json'\n      }),\n      id: this.parseId(collection, collectionName, parsed.id),\n      method: this.getRequestMethod(req),\n      query: parsed.query,\n      resourceUrl: parsed.resourceUrl,\n      url: url,\n      utils: this.requestInfoUtils\n    };\n    var resOptions;\n    if (/commands\\/?$/i.test(reqInfo.apiBase)) {\n      return this.commands(reqInfo);\n    }\n    var methodInterceptor = this.bind(reqInfo.method);\n    if (methodInterceptor) {\n      // InMemoryDbService intercepts this HTTP method.\n      // if interceptor produced a response, return it.\n      // else InMemoryDbService chose not to intercept; continue processing.\n      var interceptorResponse = methodInterceptor(reqInfo);\n      if (interceptorResponse) {\n        return interceptorResponse;\n      }\n      ;\n    }\n    if (this.db[collectionName]) {\n      // request is for a known collection of the InMemoryDbService\n      return this.createResponse$(function () {\n        return _this.collectionHandler(reqInfo);\n      });\n    }\n    if (this.config.passThruUnknownUrl) {\n      // unknown collection; pass request thru to a \"real\" backend.\n      return this.getPassThruBackend().handle(req);\n    }\n    // 404 - can't handle this request\n    resOptions = this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"Collection '\" + collectionName + \"' not found\");\n    return this.createResponse$(function () {\n      return resOptions;\n    });\n  };\n  /**\r\n   * Add configured delay to response observable unless delay === 0\r\n   */\n  BackendService.prototype.addDelay = function (response) {\n    var d = this.config.delay;\n    return d === 0 ? response : delayResponse(response, d || 500);\n  };\n  /**\r\n   * Apply query/search parameters as a filter over the collection\r\n   * This impl only supports RegExp queries on string properties of the collection\r\n   * ANDs the conditions together\r\n   */\n  BackendService.prototype.applyQuery = function (collection, query) {\n    // extract filtering conditions - {propertyName, RegExps) - from query/search parameters\n    var conditions = [];\n    var caseSensitive = this.config.caseSensitiveSearch ? undefined : 'i';\n    query.forEach(function (value, name) {\n      value.forEach(function (v) {\n        return conditions.push({\n          name: name,\n          rx: new RegExp(decodeURI(v), caseSensitive)\n        });\n      });\n    });\n    var len = conditions.length;\n    if (!len) {\n      return collection;\n    }\n    // AND the RegExp conditions\n    return collection.filter(function (row) {\n      var ok = true;\n      var i = len;\n      while (ok && i) {\n        i -= 1;\n        var cond = conditions[i];\n        ok = cond.rx.test(row[cond.name]);\n      }\n      return ok;\n    });\n  };\n  /**\r\n   * Get a method from the `InMemoryDbService` (if it exists), bound to that service\r\n   */\n  BackendService.prototype.bind = function (methodName) {\n    var fn = this.inMemDbService[methodName];\n    return fn ? fn.bind(this.inMemDbService) : undefined;\n  };\n  BackendService.prototype.bodify = function (data) {\n    return this.config.dataEncapsulation ? {\n      data: data\n    } : data;\n  };\n  BackendService.prototype.clone = function (data) {\n    return JSON.parse(JSON.stringify(data));\n  };\n  BackendService.prototype.collectionHandler = function (reqInfo) {\n    // const req = reqInfo.req;\n    var resOptions;\n    switch (reqInfo.method) {\n      case 'get':\n        resOptions = this.get(reqInfo);\n        break;\n      case 'post':\n        resOptions = this.post(reqInfo);\n        break;\n      case 'put':\n        resOptions = this.put(reqInfo);\n        break;\n      case 'delete':\n        resOptions = this.delete(reqInfo);\n        break;\n      default:\n        resOptions = this.createErrorResponseOptions(reqInfo.url, STATUS.METHOD_NOT_ALLOWED, 'Method not allowed');\n        break;\n    }\n    // If `inMemDbService.responseInterceptor` exists, let it morph the response options\n    var interceptor = this.bind('responseInterceptor');\n    return interceptor ? interceptor(resOptions, reqInfo) : resOptions;\n  };\n  /**\r\n   * Commands reconfigure the in-memory web api service or extract information from it.\r\n   * Commands ignore the latency delay and respond ASAP.\r\n   *\r\n   * When the last segment of the `apiBase` path is \"commands\",\r\n   * the `collectionName` is the command.\r\n   *\r\n   * Example URLs:\r\n   *   commands/resetdb (POST) // Reset the \"database\" to its original state\r\n   *   commands/config (GET)   // Return this service's config object\r\n   *   commands/config (POST)  // Update the config (e.g. the delay)\r\n   *\r\n   * Usage:\r\n   *   http.post('commands/resetdb', undefined);\r\n   *   http.get('commands/config');\r\n   *   http.post('commands/config', '{\"delay\":1000}');\r\n   */\n  BackendService.prototype.commands = function (reqInfo) {\n    var _this = this;\n    var command = reqInfo.collectionName.toLowerCase();\n    var method = reqInfo.method;\n    var resOptions = {\n      url: reqInfo.url\n    };\n    switch (command) {\n      case 'resetdb':\n        resOptions.status = STATUS.NO_CONTENT;\n        return this.resetDb(reqInfo).pipe(concatMap(function () {\n          return _this.createResponse$(function () {\n            return resOptions;\n          }, false /* no latency delay */);\n        }));\n      case 'config':\n        if (method === 'get') {\n          resOptions.status = STATUS.OK;\n          resOptions.body = this.clone(this.config);\n          // any other HTTP method is assumed to be a config update\n        } else {\n          var body = this.getJsonBody(reqInfo.req);\n          Object.assign(this.config, body);\n          this.passThruBackend = undefined; // re-create when needed\n          resOptions.status = STATUS.NO_CONTENT;\n        }\n        break;\n      default:\n        resOptions = this.createErrorResponseOptions(reqInfo.url, STATUS.INTERNAL_SERVER_ERROR, \"Unknown command \\\"\" + command + \"\\\"\");\n    }\n    return this.createResponse$(function () {\n      return resOptions;\n    }, false /* no latency delay */);\n  };\n\n  BackendService.prototype.createErrorResponseOptions = function (url, status, message) {\n    return {\n      body: {\n        error: \"\" + message\n      },\n      url: url,\n      headers: this.createHeaders({\n        'Content-Type': 'application/json'\n      }),\n      status: status\n    };\n  };\n  /**\r\n   * Create a cold response Observable from a factory for ResponseOptions\r\n   * @param resOptionsFactory - creates ResponseOptions when observable is subscribed\r\n   * @param withDelay - if true (default), add simulated latency delay from configuration\r\n   */\n  BackendService.prototype.createResponse$ = function (resOptionsFactory, withDelay) {\n    if (withDelay === void 0) {\n      withDelay = true;\n    }\n    var resOptions$ = this.createResponseOptions$(resOptionsFactory);\n    var resp$ = this.createResponse$fromResponseOptions$(resOptions$);\n    return withDelay ? this.addDelay(resp$) : resp$;\n  };\n  /**\r\n   * Create a cold Observable of ResponseOptions.\r\n   * @param resOptionsFactory - creates ResponseOptions when observable is subscribed\r\n   */\n  BackendService.prototype.createResponseOptions$ = function (resOptionsFactory) {\n    var _this = this;\n    return new Observable(function (responseObserver) {\n      var resOptions;\n      try {\n        resOptions = resOptionsFactory();\n      } catch (error) {\n        var err = error.message || error;\n        resOptions = _this.createErrorResponseOptions('', STATUS.INTERNAL_SERVER_ERROR, \"\" + err);\n      }\n      var status = resOptions.status;\n      try {\n        resOptions.statusText = getStatusText(status);\n      } catch (e) {/* ignore failure */}\n      if (isSuccess(status)) {\n        responseObserver.next(resOptions);\n        responseObserver.complete();\n      } else {\n        responseObserver.error(resOptions);\n      }\n      return function () {}; // unsubscribe function\n    });\n  };\n\n  BackendService.prototype.delete = function (_a) {\n    var collection = _a.collection,\n      collectionName = _a.collectionName,\n      headers = _a.headers,\n      id = _a.id,\n      url = _a.url;\n    // tslint:disable-next-line:triple-equals\n    if (id == undefined) {\n      return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"Missing \\\"\" + collectionName + \"\\\" id\");\n    }\n    var exists = this.removeById(collection, id);\n    return {\n      headers: headers,\n      status: exists || !this.config.delete404 ? STATUS.NO_CONTENT : STATUS.NOT_FOUND\n    };\n  };\n  /**\r\n   * Find first instance of item in collection by `item.id`\r\n   * @param collection\r\n   * @param id\r\n   */\n  BackendService.prototype.findById = function (collection, id) {\n    return collection.find(function (item) {\n      return item.id === id;\n    });\n  };\n  /**\r\n   * Generate the next available id for item in this collection\r\n   * Use method from `inMemDbService` if it exists and returns a value,\r\n   * else delegates to `genIdDefault`.\r\n   * @param collection - collection of items with `id` key property\r\n   */\n  BackendService.prototype.genId = function (collection, collectionName) {\n    var genId = this.bind('genId');\n    if (genId) {\n      var id = genId(collection, collectionName);\n      // tslint:disable-next-line:triple-equals\n      if (id != undefined) {\n        return id;\n      }\n    }\n    return this.genIdDefault(collection, collectionName);\n  };\n  /**\r\n   * Default generator of the next available id for item in this collection\r\n   * This default implementation works only for numeric ids.\r\n   * @param collection - collection of items with `id` key property\r\n   * @param collectionName - name of the collection\r\n   */\n  BackendService.prototype.genIdDefault = function (collection, collectionName) {\n    if (!this.isCollectionIdNumeric(collection, collectionName)) {\n      throw new Error(\"Collection '\" + collectionName + \"' id type is non-numeric or unknown. Can only generate numeric ids.\");\n    }\n    var maxId = 0;\n    collection.reduce(function (prev, item) {\n      maxId = Math.max(maxId, typeof item.id === 'number' ? item.id : maxId);\n    }, undefined);\n    return maxId + 1;\n  };\n  BackendService.prototype.get = function (_a) {\n    var collection = _a.collection,\n      collectionName = _a.collectionName,\n      headers = _a.headers,\n      id = _a.id,\n      query = _a.query,\n      url = _a.url;\n    var data = collection;\n    // tslint:disable-next-line:triple-equals\n    if (id != undefined && id !== '') {\n      data = this.findById(collection, id);\n    } else if (query) {\n      data = this.applyQuery(collection, query);\n    }\n    if (!data) {\n      return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"'\" + collectionName + \"' with id='\" + id + \"' not found\");\n    }\n    return {\n      body: this.bodify(this.clone(data)),\n      headers: headers,\n      status: STATUS.OK\n    };\n  };\n  /**\r\n   * Get location info from a url, even on server where `document` is not defined\r\n   */\n  BackendService.prototype.getLocation = function (url) {\n    if (!url.startsWith('http')) {\n      // get the document iff running in browser\n      var doc = typeof document === 'undefined' ? undefined : document;\n      // add host info to url before parsing.  Use a fake host when not in browser.\n      var base = doc ? doc.location.protocol + '//' + doc.location.host : 'http://fake';\n      url = url.startsWith('/') ? base + url : base + '/' + url;\n    }\n    return parseUri(url);\n  };\n  ;\n  /**\r\n   * get or create the function that passes unhandled requests\r\n   * through to the \"real\" backend.\r\n   */\n  BackendService.prototype.getPassThruBackend = function () {\n    return this.passThruBackend ? this.passThruBackend : this.passThruBackend = this.createPassThruBackend();\n  };\n  /**\r\n   * Get utility methods from this service instance.\r\n   * Useful within an HTTP method override\r\n   */\n  BackendService.prototype.getRequestInfoUtils = function () {\n    var _this = this;\n    return {\n      createResponse$: this.createResponse$.bind(this),\n      findById: this.findById.bind(this),\n      isCollectionIdNumeric: this.isCollectionIdNumeric.bind(this),\n      getConfig: function () {\n        return _this.config;\n      },\n      getDb: function () {\n        return _this.db;\n      },\n      getJsonBody: this.getJsonBody.bind(this),\n      getLocation: this.getLocation.bind(this),\n      getPassThruBackend: this.getPassThruBackend.bind(this),\n      parseRequestUrl: this.parseRequestUrl.bind(this)\n    };\n  };\n  BackendService.prototype.indexOf = function (collection, id) {\n    return collection.findIndex(function (item) {\n      return item.id === id;\n    });\n  };\n  /** Parse the id as a number. Return original value if not a number. */\n  BackendService.prototype.parseId = function (collection, collectionName, id) {\n    if (!this.isCollectionIdNumeric(collection, collectionName)) {\n      // Can't confirm that `id` is a numeric type; don't parse as a number\n      // or else `'42'` -> `42` and _get by id_ fails.\n      return id;\n    }\n    var idNum = parseFloat(id);\n    return isNaN(idNum) ? id : idNum;\n  };\n  /**\r\n   * return true if can determine that the collection's `item.id` is a number\r\n   * This implementation can't tell if the collection is empty so it assumes NO\r\n   * */\n  BackendService.prototype.isCollectionIdNumeric = function (collection, collectionName) {\n    // collectionName not used now but override might maintain collection type information\n    // so that it could know the type of the `id` even when the collection is empty.\n    return !!(collection && collection[0]) && typeof collection[0].id === 'number';\n  };\n  /**\r\n   * Parses the request URL into a `ParsedRequestUrl` object.\r\n   * Parsing depends upon certain values of `config`: `apiBase`, `host`, and `urlRoot`.\r\n   *\r\n   * Configuring the `apiBase` yields the most interesting changes to `parseRequestUrl` behavior:\r\n   *   When apiBase=undefined and url='http://localhost/api/collection/42'\r\n   *     {base: 'api/', collectionName: 'collection', id: '42', ...}\r\n   *   When apiBase='some/api/root/' and url='http://localhost/some/api/root/collection'\r\n   *     {base: 'some/api/root/', collectionName: 'collection', id: undefined, ...}\r\n   *   When apiBase='/' and url='http://localhost/collection'\r\n   *     {base: '/', collectionName: 'collection', id: undefined, ...}\r\n   *\r\n   * The actual api base segment values are ignored. Only the number of segments matters.\r\n   * The following api base strings are considered identical: 'a/b' ~ 'some/api/' ~ `two/segments'\r\n   *\r\n   * To replace this default method, assign your alternative to your InMemDbService['parseRequestUrl']\r\n   */\n  BackendService.prototype.parseRequestUrl = function (url) {\n    try {\n      var loc = this.getLocation(url);\n      var drop = this.config.rootPath.length;\n      var urlRoot = '';\n      if (loc.host !== this.config.host) {\n        // url for a server on a different host!\n        // assume it's collection is actually here too.\n        drop = 1; // the leading slash\n        urlRoot = loc.protocol + '//' + loc.host + '/';\n      }\n      var path = loc.path.substring(drop);\n      var pathSegments = path.split('/');\n      var segmentIx = 0;\n      // apiBase: the front part of the path devoted to getting to the api route\n      // Assumes first path segment if no config.apiBase\n      // else ignores as many path segments as are in config.apiBase\n      // Does NOT care what the api base chars actually are.\n      var apiBase = void 0;\n      // tslint:disable-next-line:triple-equals\n      if (this.config.apiBase == undefined) {\n        apiBase = pathSegments[segmentIx++];\n      } else {\n        apiBase = removeTrailingSlash(this.config.apiBase.trim());\n        if (apiBase) {\n          segmentIx = apiBase.split('/').length;\n        } else {\n          segmentIx = 0; // no api base at all; unwise but allowed.\n        }\n      }\n\n      apiBase += '/';\n      var collectionName = pathSegments[segmentIx++];\n      // ignore anything after a '.' (e.g.,the \"json\" in \"customers.json\")\n      collectionName = collectionName && collectionName.split('.')[0];\n      var id = pathSegments[segmentIx++];\n      var query = this.createQueryMap(loc.query);\n      var resourceUrl = urlRoot + apiBase + collectionName + '/';\n      return {\n        apiBase: apiBase,\n        collectionName: collectionName,\n        id: id,\n        query: query,\n        resourceUrl: resourceUrl\n      };\n    } catch (err) {\n      var msg = \"unable to parse url '\" + url + \"'; original error: \" + err.message;\n      throw new Error(msg);\n    }\n  };\n  // Create entity\n  // Can update an existing entity too if post409 is false.\n  BackendService.prototype.post = function (_a) {\n    var collection = _a.collection,\n      collectionName = _a.collectionName,\n      headers = _a.headers,\n      id = _a.id,\n      req = _a.req,\n      resourceUrl = _a.resourceUrl,\n      url = _a.url;\n    var item = this.clone(this.getJsonBody(req));\n    // tslint:disable-next-line:triple-equals\n    if (item.id == undefined) {\n      try {\n        item.id = id || this.genId(collection, collectionName);\n      } catch (err) {\n        var emsg = err.message || '';\n        if (/id type is non-numeric/.test(emsg)) {\n          return this.createErrorResponseOptions(url, STATUS.UNPROCESSABLE_ENTRY, emsg);\n        } else {\n          console.error(err);\n          return this.createErrorResponseOptions(url, STATUS.INTERNAL_SERVER_ERROR, \"Failed to generate new id for '\" + collectionName + \"'\");\n        }\n      }\n    }\n    if (id && id !== item.id) {\n      return this.createErrorResponseOptions(url, STATUS.BAD_REQUEST, \"Request id does not match item.id\");\n    } else {\n      id = item.id;\n    }\n    var existingIx = this.indexOf(collection, id);\n    var body = this.bodify(item);\n    if (existingIx === -1) {\n      collection.push(item);\n      headers.set('Location', resourceUrl + '/' + id);\n      return {\n        headers: headers,\n        body: body,\n        status: STATUS.CREATED\n      };\n    } else if (this.config.post409) {\n      return this.createErrorResponseOptions(url, STATUS.CONFLICT, \"'\" + collectionName + \"' item with id='\" + id + \" exists and may not be updated with POST; use PUT instead.\");\n    } else {\n      collection[existingIx] = item;\n      return this.config.post204 ? {\n        headers: headers,\n        status: STATUS.NO_CONTENT\n      } :\n      // successful; no content\n      {\n        headers: headers,\n        body: body,\n        status: STATUS.OK\n      }; // successful; return entity\n    }\n  };\n  // Update existing entity\n  // Can create an entity too if put404 is false.\n  BackendService.prototype.put = function (_a) {\n    var collection = _a.collection,\n      collectionName = _a.collectionName,\n      headers = _a.headers,\n      id = _a.id,\n      req = _a.req,\n      url = _a.url;\n    var item = this.clone(this.getJsonBody(req));\n    // tslint:disable-next-line:triple-equals\n    if (item.id == undefined) {\n      return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"Missing '\" + collectionName + \"' id\");\n    }\n    if (id && id !== item.id) {\n      return this.createErrorResponseOptions(url, STATUS.BAD_REQUEST, \"Request for '\" + collectionName + \"' id does not match item.id\");\n    } else {\n      id = item.id;\n    }\n    var existingIx = this.indexOf(collection, id);\n    var body = this.bodify(item);\n    if (existingIx > -1) {\n      collection[existingIx] = item;\n      return this.config.put204 ? {\n        headers: headers,\n        status: STATUS.NO_CONTENT\n      } :\n      // successful; no content\n      {\n        headers: headers,\n        body: body,\n        status: STATUS.OK\n      }; // successful; return entity\n    } else if (this.config.put404) {\n      // item to update not found; use POST to create new item for this id.\n      return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"'\" + collectionName + \"' item with id='\" + id + \" not found and may not be created with PUT; use POST instead.\");\n    } else {\n      // create new item for id not found\n      collection.push(item);\n      return {\n        headers: headers,\n        body: body,\n        status: STATUS.CREATED\n      };\n    }\n  };\n  BackendService.prototype.removeById = function (collection, id) {\n    var ix = this.indexOf(collection, id);\n    if (ix > -1) {\n      collection.splice(ix, 1);\n      return true;\n    }\n    return false;\n  };\n  /**\r\n   * Tell your in-mem \"database\" to reset.\r\n   * returns Observable of the database because resetting it could be async\r\n   */\n  BackendService.prototype.resetDb = function (reqInfo) {\n    var _this = this;\n    this.dbReadySubject.next(false);\n    var db = this.inMemDbService.createDb(reqInfo);\n    var db$ = db instanceof Observable ? db : typeof db.then === 'function' ? from(db) : of(db);\n    db$.pipe(first()).subscribe(function (d) {\n      _this.db = d;\n      _this.dbReadySubject.next(true);\n    });\n    return this.dbReady;\n  };\n  return BackendService;\n}();\nexport { BackendService };","map":{"version":3,"names":["Observable","BehaviorSubject","of","from","concatMap","first","getStatusText","isSuccess","STATUS","delayResponse","InMemoryBackendConfig","parseUri","removeTrailingSlash","BackendService","inMemDbService","config","requestInfoUtils","getRequestInfoUtils","loc","getLocation","host","rootPath","path","Object","assign","defineProperty","prototype","get","dbReadySubject","resetDb","asObservable","pipe","r","enumerable","configurable","handleRequest","req","_this","dbReady","handleRequest_","url","urlWithParams","parser","bind","parsed","parseRequestUrl","collectionName","collection","db","reqInfo","apiBase","headers","createHeaders","id","parseId","method","getRequestMethod","query","resourceUrl","utils","resOptions","test","commands","methodInterceptor","interceptorResponse","createResponse$","collectionHandler","passThruUnknownUrl","getPassThruBackend","handle","createErrorResponseOptions","NOT_FOUND","addDelay","response","d","delay","applyQuery","conditions","caseSensitive","caseSensitiveSearch","undefined","forEach","value","name","v","push","rx","RegExp","decodeURI","len","length","filter","row","ok","i","cond","methodName","fn","bodify","data","dataEncapsulation","clone","JSON","parse","stringify","post","put","delete","METHOD_NOT_ALLOWED","interceptor","command","toLowerCase","status","NO_CONTENT","OK","body","getJsonBody","passThruBackend","INTERNAL_SERVER_ERROR","message","error","resOptionsFactory","withDelay","resOptions$","createResponseOptions$","resp$","createResponse$fromResponseOptions$","responseObserver","err","statusText","e","next","complete","_a","exists","removeById","delete404","findById","find","item","genId","genIdDefault","isCollectionIdNumeric","Error","maxId","reduce","prev","Math","max","startsWith","doc","document","base","location","protocol","createPassThruBackend","getConfig","getDb","indexOf","findIndex","idNum","parseFloat","isNaN","drop","urlRoot","substring","pathSegments","split","segmentIx","trim","createQueryMap","msg","emsg","UNPROCESSABLE_ENTRY","console","BAD_REQUEST","existingIx","set","CREATED","post409","CONFLICT","post204","put204","put404","ix","splice","createDb","db$","then","subscribe"],"sources":["/Users/sang/WorkSpace/nd-0067-c3-angular-fundamentals-project-starter/node_modules/angular-in-memory-web-api/backend.service.js"],"sourcesContent":["import { Observable, BehaviorSubject, of, from } from 'rxjs';\r\nimport { concatMap, first } from 'rxjs/operators';\r\nimport { getStatusText, isSuccess, STATUS } from './http-status-codes';\r\nimport { delayResponse } from './delay-response';\r\nimport { InMemoryBackendConfig, parseUri, removeTrailingSlash } from './interfaces';\r\n/**\r\n * Base class for in-memory web api back-ends\r\n * Simulate the behavior of a RESTy web api\r\n * backed by the simple in-memory data store provided by the injected `InMemoryDbService` service.\r\n * Conforms mostly to behavior described here:\r\n * http://www.restapitutorial.com/lessons/httpmethods.html\r\n */\r\nvar BackendService = /** @class */ (function () {\r\n    function BackendService(inMemDbService, config) {\r\n        if (config === void 0) { config = {}; }\r\n        this.inMemDbService = inMemDbService;\r\n        this.config = new InMemoryBackendConfig();\r\n        this.requestInfoUtils = this.getRequestInfoUtils();\r\n        var loc = this.getLocation('/');\r\n        this.config.host = loc.host; // default to app web server host\r\n        this.config.rootPath = loc.path; // default to path when app is served (e.g.'/')\r\n        Object.assign(this.config, config);\r\n    }\r\n    Object.defineProperty(BackendService.prototype, \"dbReady\", {\r\n        ////  protected /////\r\n        get: function () {\r\n            if (!this.dbReadySubject) {\r\n                // first time the service is called.\r\n                this.dbReadySubject = new BehaviorSubject(false);\r\n                this.resetDb();\r\n            }\r\n            return this.dbReadySubject.asObservable().pipe(first(function (r) { return r; }));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Process Request and return an Observable of Http Response object\r\n     * in the manner of a RESTy web api.\r\n     *\r\n     * Expect URI pattern in the form :base/:collectionName/:id?\r\n     * Examples:\r\n     *   // for store with a 'customers' collection\r\n     *   GET api/customers          // all customers\r\n     *   GET api/customers/42       // the character with id=42\r\n     *   GET api/customers?name=^j  // 'j' is a regex; returns customers whose name starts with 'j' or 'J'\r\n     *   GET api/customers.json/42  // ignores the \".json\"\r\n     *\r\n     * Also accepts direct commands to the service in which the last segment of the apiBase is the word \"commands\"\r\n     * Examples:\r\n     *     POST commands/resetDb,\r\n     *     GET/POST commands/config - get or (re)set the config\r\n     *\r\n     *   HTTP overrides:\r\n     *     If the injected inMemDbService defines an HTTP method (lowercase)\r\n     *     The request is forwarded to that method as in\r\n     *     `inMemDbService.get(requestInfo)`\r\n     *     which must return either an Observable of the response type\r\n     *     for this http library or null|undefined (which means \"keep processing\").\r\n     */\r\n    BackendService.prototype.handleRequest = function (req) {\r\n        var _this = this;\r\n        //  handle the request when there is an in-memory database\r\n        return this.dbReady.pipe(concatMap(function () { return _this.handleRequest_(req); }));\r\n    };\r\n    BackendService.prototype.handleRequest_ = function (req) {\r\n        var _this = this;\r\n        var url = req.urlWithParams ? req.urlWithParams : req.url;\r\n        // Try override parser\r\n        // If no override parser or it returns nothing, use default parser\r\n        var parser = this.bind('parseRequestUrl');\r\n        var parsed = (parser && parser(url, this.requestInfoUtils)) ||\r\n            this.parseRequestUrl(url);\r\n        var collectionName = parsed.collectionName;\r\n        var collection = this.db[collectionName];\r\n        var reqInfo = {\r\n            req: req,\r\n            apiBase: parsed.apiBase,\r\n            collection: collection,\r\n            collectionName: collectionName,\r\n            headers: this.createHeaders({ 'Content-Type': 'application/json' }),\r\n            id: this.parseId(collection, collectionName, parsed.id),\r\n            method: this.getRequestMethod(req),\r\n            query: parsed.query,\r\n            resourceUrl: parsed.resourceUrl,\r\n            url: url,\r\n            utils: this.requestInfoUtils\r\n        };\r\n        var resOptions;\r\n        if (/commands\\/?$/i.test(reqInfo.apiBase)) {\r\n            return this.commands(reqInfo);\r\n        }\r\n        var methodInterceptor = this.bind(reqInfo.method);\r\n        if (methodInterceptor) {\r\n            // InMemoryDbService intercepts this HTTP method.\r\n            // if interceptor produced a response, return it.\r\n            // else InMemoryDbService chose not to intercept; continue processing.\r\n            var interceptorResponse = methodInterceptor(reqInfo);\r\n            if (interceptorResponse) {\r\n                return interceptorResponse;\r\n            }\r\n            ;\r\n        }\r\n        if (this.db[collectionName]) {\r\n            // request is for a known collection of the InMemoryDbService\r\n            return this.createResponse$(function () { return _this.collectionHandler(reqInfo); });\r\n        }\r\n        if (this.config.passThruUnknownUrl) {\r\n            // unknown collection; pass request thru to a \"real\" backend.\r\n            return this.getPassThruBackend().handle(req);\r\n        }\r\n        // 404 - can't handle this request\r\n        resOptions = this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"Collection '\" + collectionName + \"' not found\");\r\n        return this.createResponse$(function () { return resOptions; });\r\n    };\r\n    /**\r\n     * Add configured delay to response observable unless delay === 0\r\n     */\r\n    BackendService.prototype.addDelay = function (response) {\r\n        var d = this.config.delay;\r\n        return d === 0 ? response : delayResponse(response, d || 500);\r\n    };\r\n    /**\r\n     * Apply query/search parameters as a filter over the collection\r\n     * This impl only supports RegExp queries on string properties of the collection\r\n     * ANDs the conditions together\r\n     */\r\n    BackendService.prototype.applyQuery = function (collection, query) {\r\n        // extract filtering conditions - {propertyName, RegExps) - from query/search parameters\r\n        var conditions = [];\r\n        var caseSensitive = this.config.caseSensitiveSearch ? undefined : 'i';\r\n        query.forEach(function (value, name) {\r\n            value.forEach(function (v) { return conditions.push({ name: name, rx: new RegExp(decodeURI(v), caseSensitive) }); });\r\n        });\r\n        var len = conditions.length;\r\n        if (!len) {\r\n            return collection;\r\n        }\r\n        // AND the RegExp conditions\r\n        return collection.filter(function (row) {\r\n            var ok = true;\r\n            var i = len;\r\n            while (ok && i) {\r\n                i -= 1;\r\n                var cond = conditions[i];\r\n                ok = cond.rx.test(row[cond.name]);\r\n            }\r\n            return ok;\r\n        });\r\n    };\r\n    /**\r\n     * Get a method from the `InMemoryDbService` (if it exists), bound to that service\r\n     */\r\n    BackendService.prototype.bind = function (methodName) {\r\n        var fn = this.inMemDbService[methodName];\r\n        return fn ? fn.bind(this.inMemDbService) : undefined;\r\n    };\r\n    BackendService.prototype.bodify = function (data) {\r\n        return this.config.dataEncapsulation ? { data: data } : data;\r\n    };\r\n    BackendService.prototype.clone = function (data) {\r\n        return JSON.parse(JSON.stringify(data));\r\n    };\r\n    BackendService.prototype.collectionHandler = function (reqInfo) {\r\n        // const req = reqInfo.req;\r\n        var resOptions;\r\n        switch (reqInfo.method) {\r\n            case 'get':\r\n                resOptions = this.get(reqInfo);\r\n                break;\r\n            case 'post':\r\n                resOptions = this.post(reqInfo);\r\n                break;\r\n            case 'put':\r\n                resOptions = this.put(reqInfo);\r\n                break;\r\n            case 'delete':\r\n                resOptions = this.delete(reqInfo);\r\n                break;\r\n            default:\r\n                resOptions = this.createErrorResponseOptions(reqInfo.url, STATUS.METHOD_NOT_ALLOWED, 'Method not allowed');\r\n                break;\r\n        }\r\n        // If `inMemDbService.responseInterceptor` exists, let it morph the response options\r\n        var interceptor = this.bind('responseInterceptor');\r\n        return interceptor ? interceptor(resOptions, reqInfo) : resOptions;\r\n    };\r\n    /**\r\n     * Commands reconfigure the in-memory web api service or extract information from it.\r\n     * Commands ignore the latency delay and respond ASAP.\r\n     *\r\n     * When the last segment of the `apiBase` path is \"commands\",\r\n     * the `collectionName` is the command.\r\n     *\r\n     * Example URLs:\r\n     *   commands/resetdb (POST) // Reset the \"database\" to its original state\r\n     *   commands/config (GET)   // Return this service's config object\r\n     *   commands/config (POST)  // Update the config (e.g. the delay)\r\n     *\r\n     * Usage:\r\n     *   http.post('commands/resetdb', undefined);\r\n     *   http.get('commands/config');\r\n     *   http.post('commands/config', '{\"delay\":1000}');\r\n     */\r\n    BackendService.prototype.commands = function (reqInfo) {\r\n        var _this = this;\r\n        var command = reqInfo.collectionName.toLowerCase();\r\n        var method = reqInfo.method;\r\n        var resOptions = {\r\n            url: reqInfo.url\r\n        };\r\n        switch (command) {\r\n            case 'resetdb':\r\n                resOptions.status = STATUS.NO_CONTENT;\r\n                return this.resetDb(reqInfo).pipe(concatMap(function () { return _this.createResponse$(function () { return resOptions; }, false /* no latency delay */); }));\r\n            case 'config':\r\n                if (method === 'get') {\r\n                    resOptions.status = STATUS.OK;\r\n                    resOptions.body = this.clone(this.config);\r\n                    // any other HTTP method is assumed to be a config update\r\n                }\r\n                else {\r\n                    var body = this.getJsonBody(reqInfo.req);\r\n                    Object.assign(this.config, body);\r\n                    this.passThruBackend = undefined; // re-create when needed\r\n                    resOptions.status = STATUS.NO_CONTENT;\r\n                }\r\n                break;\r\n            default:\r\n                resOptions = this.createErrorResponseOptions(reqInfo.url, STATUS.INTERNAL_SERVER_ERROR, \"Unknown command \\\"\" + command + \"\\\"\");\r\n        }\r\n        return this.createResponse$(function () { return resOptions; }, false /* no latency delay */);\r\n    };\r\n    BackendService.prototype.createErrorResponseOptions = function (url, status, message) {\r\n        return {\r\n            body: { error: \"\" + message },\r\n            url: url,\r\n            headers: this.createHeaders({ 'Content-Type': 'application/json' }),\r\n            status: status\r\n        };\r\n    };\r\n    /**\r\n     * Create a cold response Observable from a factory for ResponseOptions\r\n     * @param resOptionsFactory - creates ResponseOptions when observable is subscribed\r\n     * @param withDelay - if true (default), add simulated latency delay from configuration\r\n     */\r\n    BackendService.prototype.createResponse$ = function (resOptionsFactory, withDelay) {\r\n        if (withDelay === void 0) { withDelay = true; }\r\n        var resOptions$ = this.createResponseOptions$(resOptionsFactory);\r\n        var resp$ = this.createResponse$fromResponseOptions$(resOptions$);\r\n        return withDelay ? this.addDelay(resp$) : resp$;\r\n    };\r\n    /**\r\n     * Create a cold Observable of ResponseOptions.\r\n     * @param resOptionsFactory - creates ResponseOptions when observable is subscribed\r\n     */\r\n    BackendService.prototype.createResponseOptions$ = function (resOptionsFactory) {\r\n        var _this = this;\r\n        return new Observable(function (responseObserver) {\r\n            var resOptions;\r\n            try {\r\n                resOptions = resOptionsFactory();\r\n            }\r\n            catch (error) {\r\n                var err = error.message || error;\r\n                resOptions = _this.createErrorResponseOptions('', STATUS.INTERNAL_SERVER_ERROR, \"\" + err);\r\n            }\r\n            var status = resOptions.status;\r\n            try {\r\n                resOptions.statusText = getStatusText(status);\r\n            }\r\n            catch (e) { /* ignore failure */ }\r\n            if (isSuccess(status)) {\r\n                responseObserver.next(resOptions);\r\n                responseObserver.complete();\r\n            }\r\n            else {\r\n                responseObserver.error(resOptions);\r\n            }\r\n            return function () { }; // unsubscribe function\r\n        });\r\n    };\r\n    BackendService.prototype.delete = function (_a) {\r\n        var collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers, id = _a.id, url = _a.url;\r\n        // tslint:disable-next-line:triple-equals\r\n        if (id == undefined) {\r\n            return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"Missing \\\"\" + collectionName + \"\\\" id\");\r\n        }\r\n        var exists = this.removeById(collection, id);\r\n        return {\r\n            headers: headers,\r\n            status: (exists || !this.config.delete404) ? STATUS.NO_CONTENT : STATUS.NOT_FOUND\r\n        };\r\n    };\r\n    /**\r\n     * Find first instance of item in collection by `item.id`\r\n     * @param collection\r\n     * @param id\r\n     */\r\n    BackendService.prototype.findById = function (collection, id) {\r\n        return collection.find(function (item) { return item.id === id; });\r\n    };\r\n    /**\r\n     * Generate the next available id for item in this collection\r\n     * Use method from `inMemDbService` if it exists and returns a value,\r\n     * else delegates to `genIdDefault`.\r\n     * @param collection - collection of items with `id` key property\r\n     */\r\n    BackendService.prototype.genId = function (collection, collectionName) {\r\n        var genId = this.bind('genId');\r\n        if (genId) {\r\n            var id = genId(collection, collectionName);\r\n            // tslint:disable-next-line:triple-equals\r\n            if (id != undefined) {\r\n                return id;\r\n            }\r\n        }\r\n        return this.genIdDefault(collection, collectionName);\r\n    };\r\n    /**\r\n     * Default generator of the next available id for item in this collection\r\n     * This default implementation works only for numeric ids.\r\n     * @param collection - collection of items with `id` key property\r\n     * @param collectionName - name of the collection\r\n     */\r\n    BackendService.prototype.genIdDefault = function (collection, collectionName) {\r\n        if (!this.isCollectionIdNumeric(collection, collectionName)) {\r\n            throw new Error(\"Collection '\" + collectionName + \"' id type is non-numeric or unknown. Can only generate numeric ids.\");\r\n        }\r\n        var maxId = 0;\r\n        collection.reduce(function (prev, item) {\r\n            maxId = Math.max(maxId, typeof item.id === 'number' ? item.id : maxId);\r\n        }, undefined);\r\n        return maxId + 1;\r\n    };\r\n    BackendService.prototype.get = function (_a) {\r\n        var collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers, id = _a.id, query = _a.query, url = _a.url;\r\n        var data = collection;\r\n        // tslint:disable-next-line:triple-equals\r\n        if (id != undefined && id !== '') {\r\n            data = this.findById(collection, id);\r\n        }\r\n        else if (query) {\r\n            data = this.applyQuery(collection, query);\r\n        }\r\n        if (!data) {\r\n            return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"'\" + collectionName + \"' with id='\" + id + \"' not found\");\r\n        }\r\n        return {\r\n            body: this.bodify(this.clone(data)),\r\n            headers: headers,\r\n            status: STATUS.OK\r\n        };\r\n    };\r\n    /**\r\n     * Get location info from a url, even on server where `document` is not defined\r\n     */\r\n    BackendService.prototype.getLocation = function (url) {\r\n        if (!url.startsWith('http')) {\r\n            // get the document iff running in browser\r\n            var doc = (typeof document === 'undefined') ? undefined : document;\r\n            // add host info to url before parsing.  Use a fake host when not in browser.\r\n            var base = doc ? doc.location.protocol + '//' + doc.location.host : 'http://fake';\r\n            url = url.startsWith('/') ? base + url : base + '/' + url;\r\n        }\r\n        return parseUri(url);\r\n    };\r\n    ;\r\n    /**\r\n     * get or create the function that passes unhandled requests\r\n     * through to the \"real\" backend.\r\n     */\r\n    BackendService.prototype.getPassThruBackend = function () {\r\n        return this.passThruBackend ?\r\n            this.passThruBackend :\r\n            this.passThruBackend = this.createPassThruBackend();\r\n    };\r\n    /**\r\n     * Get utility methods from this service instance.\r\n     * Useful within an HTTP method override\r\n     */\r\n    BackendService.prototype.getRequestInfoUtils = function () {\r\n        var _this = this;\r\n        return {\r\n            createResponse$: this.createResponse$.bind(this),\r\n            findById: this.findById.bind(this),\r\n            isCollectionIdNumeric: this.isCollectionIdNumeric.bind(this),\r\n            getConfig: function () { return _this.config; },\r\n            getDb: function () { return _this.db; },\r\n            getJsonBody: this.getJsonBody.bind(this),\r\n            getLocation: this.getLocation.bind(this),\r\n            getPassThruBackend: this.getPassThruBackend.bind(this),\r\n            parseRequestUrl: this.parseRequestUrl.bind(this),\r\n        };\r\n    };\r\n    BackendService.prototype.indexOf = function (collection, id) {\r\n        return collection.findIndex(function (item) { return item.id === id; });\r\n    };\r\n    /** Parse the id as a number. Return original value if not a number. */\r\n    BackendService.prototype.parseId = function (collection, collectionName, id) {\r\n        if (!this.isCollectionIdNumeric(collection, collectionName)) {\r\n            // Can't confirm that `id` is a numeric type; don't parse as a number\r\n            // or else `'42'` -> `42` and _get by id_ fails.\r\n            return id;\r\n        }\r\n        var idNum = parseFloat(id);\r\n        return isNaN(idNum) ? id : idNum;\r\n    };\r\n    /**\r\n     * return true if can determine that the collection's `item.id` is a number\r\n     * This implementation can't tell if the collection is empty so it assumes NO\r\n     * */\r\n    BackendService.prototype.isCollectionIdNumeric = function (collection, collectionName) {\r\n        // collectionName not used now but override might maintain collection type information\r\n        // so that it could know the type of the `id` even when the collection is empty.\r\n        return !!(collection && collection[0]) && typeof collection[0].id === 'number';\r\n    };\r\n    /**\r\n     * Parses the request URL into a `ParsedRequestUrl` object.\r\n     * Parsing depends upon certain values of `config`: `apiBase`, `host`, and `urlRoot`.\r\n     *\r\n     * Configuring the `apiBase` yields the most interesting changes to `parseRequestUrl` behavior:\r\n     *   When apiBase=undefined and url='http://localhost/api/collection/42'\r\n     *     {base: 'api/', collectionName: 'collection', id: '42', ...}\r\n     *   When apiBase='some/api/root/' and url='http://localhost/some/api/root/collection'\r\n     *     {base: 'some/api/root/', collectionName: 'collection', id: undefined, ...}\r\n     *   When apiBase='/' and url='http://localhost/collection'\r\n     *     {base: '/', collectionName: 'collection', id: undefined, ...}\r\n     *\r\n     * The actual api base segment values are ignored. Only the number of segments matters.\r\n     * The following api base strings are considered identical: 'a/b' ~ 'some/api/' ~ `two/segments'\r\n     *\r\n     * To replace this default method, assign your alternative to your InMemDbService['parseRequestUrl']\r\n     */\r\n    BackendService.prototype.parseRequestUrl = function (url) {\r\n        try {\r\n            var loc = this.getLocation(url);\r\n            var drop = this.config.rootPath.length;\r\n            var urlRoot = '';\r\n            if (loc.host !== this.config.host) {\r\n                // url for a server on a different host!\r\n                // assume it's collection is actually here too.\r\n                drop = 1; // the leading slash\r\n                urlRoot = loc.protocol + '//' + loc.host + '/';\r\n            }\r\n            var path = loc.path.substring(drop);\r\n            var pathSegments = path.split('/');\r\n            var segmentIx = 0;\r\n            // apiBase: the front part of the path devoted to getting to the api route\r\n            // Assumes first path segment if no config.apiBase\r\n            // else ignores as many path segments as are in config.apiBase\r\n            // Does NOT care what the api base chars actually are.\r\n            var apiBase = void 0;\r\n            // tslint:disable-next-line:triple-equals\r\n            if (this.config.apiBase == undefined) {\r\n                apiBase = pathSegments[segmentIx++];\r\n            }\r\n            else {\r\n                apiBase = removeTrailingSlash(this.config.apiBase.trim());\r\n                if (apiBase) {\r\n                    segmentIx = apiBase.split('/').length;\r\n                }\r\n                else {\r\n                    segmentIx = 0; // no api base at all; unwise but allowed.\r\n                }\r\n            }\r\n            apiBase += '/';\r\n            var collectionName = pathSegments[segmentIx++];\r\n            // ignore anything after a '.' (e.g.,the \"json\" in \"customers.json\")\r\n            collectionName = collectionName && collectionName.split('.')[0];\r\n            var id = pathSegments[segmentIx++];\r\n            var query = this.createQueryMap(loc.query);\r\n            var resourceUrl = urlRoot + apiBase + collectionName + '/';\r\n            return { apiBase: apiBase, collectionName: collectionName, id: id, query: query, resourceUrl: resourceUrl };\r\n        }\r\n        catch (err) {\r\n            var msg = \"unable to parse url '\" + url + \"'; original error: \" + err.message;\r\n            throw new Error(msg);\r\n        }\r\n    };\r\n    // Create entity\r\n    // Can update an existing entity too if post409 is false.\r\n    BackendService.prototype.post = function (_a) {\r\n        var collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers, id = _a.id, req = _a.req, resourceUrl = _a.resourceUrl, url = _a.url;\r\n        var item = this.clone(this.getJsonBody(req));\r\n        // tslint:disable-next-line:triple-equals\r\n        if (item.id == undefined) {\r\n            try {\r\n                item.id = id || this.genId(collection, collectionName);\r\n            }\r\n            catch (err) {\r\n                var emsg = err.message || '';\r\n                if (/id type is non-numeric/.test(emsg)) {\r\n                    return this.createErrorResponseOptions(url, STATUS.UNPROCESSABLE_ENTRY, emsg);\r\n                }\r\n                else {\r\n                    console.error(err);\r\n                    return this.createErrorResponseOptions(url, STATUS.INTERNAL_SERVER_ERROR, \"Failed to generate new id for '\" + collectionName + \"'\");\r\n                }\r\n            }\r\n        }\r\n        if (id && id !== item.id) {\r\n            return this.createErrorResponseOptions(url, STATUS.BAD_REQUEST, \"Request id does not match item.id\");\r\n        }\r\n        else {\r\n            id = item.id;\r\n        }\r\n        var existingIx = this.indexOf(collection, id);\r\n        var body = this.bodify(item);\r\n        if (existingIx === -1) {\r\n            collection.push(item);\r\n            headers.set('Location', resourceUrl + '/' + id);\r\n            return { headers: headers, body: body, status: STATUS.CREATED };\r\n        }\r\n        else if (this.config.post409) {\r\n            return this.createErrorResponseOptions(url, STATUS.CONFLICT, \"'\" + collectionName + \"' item with id='\" + id + \" exists and may not be updated with POST; use PUT instead.\");\r\n        }\r\n        else {\r\n            collection[existingIx] = item;\r\n            return this.config.post204 ?\r\n                { headers: headers, status: STATUS.NO_CONTENT } : // successful; no content\r\n                { headers: headers, body: body, status: STATUS.OK }; // successful; return entity\r\n        }\r\n    };\r\n    // Update existing entity\r\n    // Can create an entity too if put404 is false.\r\n    BackendService.prototype.put = function (_a) {\r\n        var collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers, id = _a.id, req = _a.req, url = _a.url;\r\n        var item = this.clone(this.getJsonBody(req));\r\n        // tslint:disable-next-line:triple-equals\r\n        if (item.id == undefined) {\r\n            return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"Missing '\" + collectionName + \"' id\");\r\n        }\r\n        if (id && id !== item.id) {\r\n            return this.createErrorResponseOptions(url, STATUS.BAD_REQUEST, \"Request for '\" + collectionName + \"' id does not match item.id\");\r\n        }\r\n        else {\r\n            id = item.id;\r\n        }\r\n        var existingIx = this.indexOf(collection, id);\r\n        var body = this.bodify(item);\r\n        if (existingIx > -1) {\r\n            collection[existingIx] = item;\r\n            return this.config.put204 ?\r\n                { headers: headers, status: STATUS.NO_CONTENT } : // successful; no content\r\n                { headers: headers, body: body, status: STATUS.OK }; // successful; return entity\r\n        }\r\n        else if (this.config.put404) {\r\n            // item to update not found; use POST to create new item for this id.\r\n            return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"'\" + collectionName + \"' item with id='\" + id + \" not found and may not be created with PUT; use POST instead.\");\r\n        }\r\n        else {\r\n            // create new item for id not found\r\n            collection.push(item);\r\n            return { headers: headers, body: body, status: STATUS.CREATED };\r\n        }\r\n    };\r\n    BackendService.prototype.removeById = function (collection, id) {\r\n        var ix = this.indexOf(collection, id);\r\n        if (ix > -1) {\r\n            collection.splice(ix, 1);\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Tell your in-mem \"database\" to reset.\r\n     * returns Observable of the database because resetting it could be async\r\n     */\r\n    BackendService.prototype.resetDb = function (reqInfo) {\r\n        var _this = this;\r\n        this.dbReadySubject.next(false);\r\n        var db = this.inMemDbService.createDb(reqInfo);\r\n        var db$ = db instanceof Observable ? db :\r\n            typeof db.then === 'function' ? from(db) :\r\n                of(db);\r\n        db$.pipe(first()).subscribe(function (d) {\r\n            _this.db = d;\r\n            _this.dbReadySubject.next(true);\r\n        });\r\n        return this.dbReady;\r\n    };\r\n    return BackendService;\r\n}());\r\nexport { BackendService };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}